"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_audio_1 = require("nativescript-audio");
var element_registry_1 = require("nativescript-angular/element-registry");
element_registry_1.registerElement("TNSSlider", function () { return require("nativescript-slider").Slider; });
var RadioComponent = /** @class */ (function () {
    function RadioComponent() {
        var _this = this;
        this.accion = String.fromCharCode(0xf04b);
        this.duration = 5;
        // Use the constructor to inject services.
        this.duration = 0;
        this.timeString = "--:--";
        this.second = -5;
        this.seconds = "--";
        this.minutes = "--";
        this.clockDisplay = this.minutes + ":" + this.seconds;
        this.data = this.second.toString();
        this.live = 'Sin ConexiÃ³n';
        this._player = new nativescript_audio_1.TNSPlayer();
        this._player.debug = false; // set true to enable TNSPlayer console logs for debugging.
        this._player
            .initFromFile({
            audioFile: 'http://radio7.domint.net:8194/;stream.mp3',
            loop: false,
            completeCallback: this._trackComplete.bind(this),
            errorCallback: this._trackError.bind(this)
        })
            .then(function () {
            _this._player.getAudioTrackDuration().then(function (duration) {
                // iOS: duration is in seconds
                // Android: duration is in milliseconds         
                console.log("song duration:", duration);
                _this.accion = String.fromCharCode(0xf04b);
                _this.volumen = _this._player.volume;
                if (duration == '-1' || duration == '0') {
                    _this.live = "Live Broadcast";
                }
            });
        });
    }
    RadioComponent.prototype.ngOnInit = function () {
        // Use the "ngOnInit" handler to initialize data for the view.
        console.log("Init RADIO");
        // this.data = 0.8;
        this._player.pause();
    };
    RadioComponent.prototype.togglePlay = function () {
        if (this._player.isAudioPlaying()) {
            this._player.pause();
            this.accion = String.fromCharCode(0xf04b);
            this.stopTick();
        }
        else {
            this._player.play();
            this.accion = String.fromCharCode(0xf04c);
            //   this._startVolumeTracking();         
            console.log("Inicio del timer");
            this.timeString = "00:00";
            this.tickTick();
        }
    };
    RadioComponent.prototype._trackComplete = function (args) {
        console.log('reference back to player:', args.player);
        // iOS only: flag indicating if completed succesfully
        console.log('whether song play completed successfully:', args.flag);
    };
    RadioComponent.prototype._trackError = function (args) {
        console.log('reference back to player:', args.player);
        console.log('the error:', args.error);
        // Android only: extra detail on error
        console.log('extra info on the error:', args.extra);
    };
    RadioComponent.prototype.tickTick = function () {
        var _this = this;
        // if(this.duration >= 0){
        var myVar = setInterval(function () {
            _this.duration = _this.duration + 1;
            if (_this.duration <= 0) {
                clearInterval(_this.interval);
            }
            _this.interval = myVar;
            _this.volumen = _this._player.volume;
            if (Math.abs(_this.duration % 60) < 10) {
                _this.seconds = "0" + Math.abs(_this.duration % 60);
            }
            else {
                _this.seconds = "" + parseInt((Math.abs(_this.duration % 60)).toString(), 10);
            }
            if (Math.abs(_this.duration / 60) < 10) {
                _this.minutes = "0" + parseInt("" + Math.abs(_this.duration / 60), 10);
            }
            else {
                _this.minutes = "" + parseInt(Math.abs((_this.duration / 60)).toString(), 10);
            }
            _this.clockDisplay = _this.minutes + ":" + _this.seconds;
        }, 1000);
        // }
    };
    RadioComponent.prototype.stopTick = function () {
        console.log("Parando");
        console.log(Math.abs(this.duration));
        clearInterval(this.interval);
    };
    RadioComponent = __decorate([
        core_1.Component({
            selector: "Radio",
            moduleId: module.id,
            templateUrl: "./radio.component.html",
            styleUrls: ['./radio.component.css'],
        }),
        __metadata("design:paramtypes", [])
    ], RadioComponent);
    return RadioComponent;
}());
exports.RadioComponent = RadioComponent;
//# sourceMappingURL=data:application/json;base64,